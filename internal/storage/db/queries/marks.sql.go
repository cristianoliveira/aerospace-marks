// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: marks.sql

package queries

import (
	"context"
	"database/sql"
)

const addMark = `-- name: AddMark :exec
INSERT INTO marks (window_id, mark) VALUES (?, ?)
`

func (q *Queries) AddMark(ctx context.Context, windowID int, mark string) error {
	_, err := q.db.ExecContext(ctx, addMark, windowID, mark)
	return err
}

const deleteAllMarks = `-- name: DeleteAllMarks :execresult
DELETE FROM marks
`

func (q *Queries) DeleteAllMarks(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllMarks)
}

const deleteByMark = `-- name: DeleteByMark :execresult
DELETE FROM marks WHERE mark = ?
`

func (q *Queries) DeleteByMark(ctx context.Context, mark string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteByMark, mark)
}

const deleteByWindow = `-- name: DeleteByWindow :execresult
DELETE FROM marks WHERE window_id = ?
`

func (q *Queries) DeleteByWindow(ctx context.Context, windowID int) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteByWindow, windowID)
}

const deleteMarksByWindowIDOrMark = `-- name: DeleteMarksByWindowIDOrMark :execresult
DELETE FROM marks WHERE window_id = ? OR mark = ?
`

func (q *Queries) DeleteMarksByWindowIDOrMark(ctx context.Context, windowID int, mark string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteMarksByWindowIDOrMark, windowID, mark)
}

const getAllMarks = `-- name: GetAllMarks :many
SELECT window_id, mark FROM marks
`

func (q *Queries) GetAllMarks(ctx context.Context) ([]Mark, error) {
	rows, err := q.db.QueryContext(ctx, getAllMarks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mark
	for rows.Next() {
		var i Mark
		if err := rows.Scan(&i.WindowID, &i.Mark); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMarksByWindowID = `-- name: GetMarksByWindowID :many
SELECT window_id, mark
FROM marks
WHERE window_id = ?
`

func (q *Queries) GetMarksByWindowID(ctx context.Context, windowID int) ([]Mark, error) {
	rows, err := q.db.QueryContext(ctx, getMarksByWindowID, windowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mark
	for rows.Next() {
		var i Mark
		if err := rows.Scan(&i.WindowID, &i.Mark); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWindowByMark = `-- name: GetWindowByMark :one
SELECT window_id, mark FROM marks WHERE mark = ?
`

func (q *Queries) GetWindowByMark(ctx context.Context, mark string) (Mark, error) {
	row := q.db.QueryRowContext(ctx, getWindowByMark, mark)
	var i Mark
	err := row.Scan(&i.WindowID, &i.Mark)
	return i, err
}
