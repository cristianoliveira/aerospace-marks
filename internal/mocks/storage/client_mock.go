// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/client.go -destination=internal/mocks/storage/client_mock.go -package=storage_mock
//

// Package storage_mock is a generated GoMock package.
package storage_mock

import (
	sql "database/sql"
	reflect "reflect"

	storage "github.com/cristianoliveira/aerospace-marks/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDbResult is a mock of DbResult interface.
type MockDbResult struct {
	ctrl     *gomock.Controller
	recorder *MockDbResultMockRecorder
	isgomock struct{}
}

// MockDbResultMockRecorder is the mock recorder for MockDbResult.
type MockDbResultMockRecorder struct {
	mock *MockDbResult
}

// NewMockDbResult creates a new mock instance.
func NewMockDbResult(ctrl *gomock.Controller) *MockDbResult {
	mock := &MockDbResult{ctrl: ctrl}
	mock.recorder = &MockDbResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbResult) EXPECT() *MockDbResultMockRecorder {
	return m.recorder
}

// LastInsertId mocks base method.
func (m *MockDbResult) LastInsertId() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastInsertId")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastInsertId indicates an expected call of LastInsertId.
func (mr *MockDbResultMockRecorder) LastInsertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInsertId", reflect.TypeOf((*MockDbResult)(nil).LastInsertId))
}

// RowsAffected mocks base method.
func (m *MockDbResult) RowsAffected() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockDbResultMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockDbResult)(nil).RowsAffected))
}

// MockStorageDbClient is a mock of StorageDbClient interface.
type MockStorageDbClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDbClientMockRecorder
	isgomock struct{}
}

// MockStorageDbClientMockRecorder is the mock recorder for MockStorageDbClient.
type MockStorageDbClientMockRecorder struct {
	mock *MockStorageDbClient
}

// NewMockStorageDbClient creates a new mock instance.
func NewMockStorageDbClient(ctrl *gomock.Controller) *MockStorageDbClient {
	mock := &MockStorageDbClient{ctrl: ctrl}
	mock.recorder = &MockStorageDbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageDbClient) EXPECT() *MockStorageDbClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageDbClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageDbClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageDbClient)(nil).Close))
}

// GetDB mocks base method.
func (m *MockStorageDbClient) GetDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockStorageDbClientMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockStorageDbClient)(nil).GetDB))
}

// GetStorageConfig mocks base method.
func (m *MockStorageDbClient) GetStorageConfig() storage.StorageConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageConfig")
	ret0, _ := ret[0].(storage.StorageConfig)
	return ret0
}

// GetStorageConfig indicates an expected call of GetStorageConfig.
func (mr *MockStorageDbClientMockRecorder) GetStorageConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageConfig", reflect.TypeOf((*MockStorageDbClient)(nil).GetStorageConfig))
}

// MockDatabaseConnector is a mock of DatabaseConnector interface.
type MockDatabaseConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseConnectorMockRecorder
	isgomock struct{}
}

// MockDatabaseConnectorMockRecorder is the mock recorder for MockDatabaseConnector.
type MockDatabaseConnectorMockRecorder struct {
	mock *MockDatabaseConnector
}

// NewMockDatabaseConnector creates a new mock instance.
func NewMockDatabaseConnector(ctrl *gomock.Controller) *MockDatabaseConnector {
	mock := &MockDatabaseConnector{ctrl: ctrl}
	mock.recorder = &MockDatabaseConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseConnector) EXPECT() *MockDatabaseConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDatabaseConnector) Connect() (storage.StorageDbClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(storage.StorageDbClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockDatabaseConnectorMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDatabaseConnector)(nil).Connect))
}
