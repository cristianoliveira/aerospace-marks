// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/marks.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/marks.go -destination=internal/mocks/storage/marks_mock.go -package=storage_mock
//

// Package storage_mock is a generated GoMock package.
package storage_mock

import (
	reflect "reflect"

	storage "github.com/cristianoliveira/aerospace-marks/internal/storage"
	queries "github.com/cristianoliveira/aerospace-marks/internal/storage/db/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockMarkStorage is a mock of MarkStorage interface.
type MockMarkStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMarkStorageMockRecorder
	isgomock struct{}
}

// MockMarkStorageMockRecorder is the mock recorder for MockMarkStorage.
type MockMarkStorageMockRecorder struct {
	mock *MockMarkStorage
}

// NewMockMarkStorage creates a new mock instance.
func NewMockMarkStorage(ctrl *gomock.Controller) *MockMarkStorage {
	mock := &MockMarkStorage{ctrl: ctrl}
	mock.recorder = &MockMarkStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarkStorage) EXPECT() *MockMarkStorageMockRecorder {
	return m.recorder
}

// AddMark mocks base method.
func (m *MockMarkStorage) AddMark(id int, mark string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMark", id, mark)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMark indicates an expected call of AddMark.
func (mr *MockMarkStorageMockRecorder) AddMark(id, mark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMark", reflect.TypeOf((*MockMarkStorage)(nil).AddMark), id, mark)
}

// Client mocks base method.
func (m *MockMarkStorage) Client() storage.StorageDbClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(storage.StorageDbClient)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockMarkStorageMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockMarkStorage)(nil).Client))
}

// Close mocks base method.
func (m *MockMarkStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMarkStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMarkStorage)(nil).Close))
}

// DeleteAllMarks mocks base method.
func (m *MockMarkStorage) DeleteAllMarks() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllMarks")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllMarks indicates an expected call of DeleteAllMarks.
func (mr *MockMarkStorageMockRecorder) DeleteAllMarks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllMarks", reflect.TypeOf((*MockMarkStorage)(nil).DeleteAllMarks))
}

// DeleteByMark mocks base method.
func (m *MockMarkStorage) DeleteByMark(mark string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByMark", mark)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByMark indicates an expected call of DeleteByMark.
func (mr *MockMarkStorageMockRecorder) DeleteByMark(mark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByMark", reflect.TypeOf((*MockMarkStorage)(nil).DeleteByMark), mark)
}

// DeleteByWindow mocks base method.
func (m *MockMarkStorage) DeleteByWindow(windowId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByWindow", windowId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByWindow indicates an expected call of DeleteByWindow.
func (mr *MockMarkStorageMockRecorder) DeleteByWindow(windowId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByWindow", reflect.TypeOf((*MockMarkStorage)(nil).DeleteByWindow), windowId)
}

// GetMarks mocks base method.
func (m *MockMarkStorage) GetMarks() ([]queries.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarks")
	ret0, _ := ret[0].([]queries.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarks indicates an expected call of GetMarks.
func (mr *MockMarkStorageMockRecorder) GetMarks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarks", reflect.TypeOf((*MockMarkStorage)(nil).GetMarks))
}

// GetMarksByWindowID mocks base method.
func (m *MockMarkStorage) GetMarksByWindowID(id int) ([]queries.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarksByWindowID", id)
	ret0, _ := ret[0].([]queries.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarksByWindowID indicates an expected call of GetMarksByWindowID.
func (mr *MockMarkStorageMockRecorder) GetMarksByWindowID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarksByWindowID", reflect.TypeOf((*MockMarkStorage)(nil).GetMarksByWindowID), id)
}

// GetWindowByMark mocks base method.
func (m *MockMarkStorage) GetWindowByMark(mark string) (*queries.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWindowByMark", mark)
	ret0, _ := ret[0].(*queries.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWindowByMark indicates an expected call of GetWindowByMark.
func (mr *MockMarkStorageMockRecorder) GetWindowByMark(mark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowByMark", reflect.TypeOf((*MockMarkStorage)(nil).GetWindowByMark), mark)
}

// GetWindowIDByMark mocks base method.
func (m *MockMarkStorage) GetWindowIDByMark(mark string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWindowIDByMark", mark)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWindowIDByMark indicates an expected call of GetWindowIDByMark.
func (mr *MockMarkStorageMockRecorder) GetWindowIDByMark(mark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowIDByMark", reflect.TypeOf((*MockMarkStorage)(nil).GetWindowIDByMark), mark)
}

// ReplaceAllMarks mocks base method.
func (m *MockMarkStorage) ReplaceAllMarks(id int, mark string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAllMarks", id, mark)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceAllMarks indicates an expected call of ReplaceAllMarks.
func (mr *MockMarkStorageMockRecorder) ReplaceAllMarks(id, mark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllMarks", reflect.TypeOf((*MockMarkStorage)(nil).ReplaceAllMarks), id, mark)
}

// ToggleMark mocks base method.
func (m *MockMarkStorage) ToggleMark(id int, mark string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleMark", id, mark)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToggleMark indicates an expected call of ToggleMark.
func (mr *MockMarkStorageMockRecorder) ToggleMark(id, mark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleMark", reflect.TypeOf((*MockMarkStorage)(nil).ToggleMark), id, mark)
}
