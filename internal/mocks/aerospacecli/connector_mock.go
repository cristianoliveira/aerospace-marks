// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cristianoliveira/aerospace-ipc (interfaces: AeroSpaceConnector)
//
// Generated by this command:
//
//	mockgen -package aerospacecli_mock github.com/cristianoliveira/aerospace-ipc AeroSpaceConnector
//

// Package aerospacecli_mock is a generated GoMock package.
package aerospacecli_mock

import (
	reflect "reflect"

	client "github.com/cristianoliveira/aerospace-ipc/client"
	gomock "go.uber.org/mock/gomock"
)

// MockAeroSpaceConnector is a mock of AeroSpaceConnector interface.
type MockAeroSpaceConnector struct {
	ctrl     *gomock.Controller
	recorder *MockAeroSpaceConnectorMockRecorder
	isgomock struct{}
}

// MockAeroSpaceConnectorMockRecorder is the mock recorder for MockAeroSpaceConnector.
type MockAeroSpaceConnectorMockRecorder struct {
	mock *MockAeroSpaceConnector
}

// NewMockAeroSpaceConnector creates a new mock instance.
func NewMockAeroSpaceConnector(ctrl *gomock.Controller) *MockAeroSpaceConnector {
	mock := &MockAeroSpaceConnector{ctrl: ctrl}
	mock.recorder = &MockAeroSpaceConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAeroSpaceConnector) EXPECT() *MockAeroSpaceConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockAeroSpaceConnector) Connect() (client.AeroSpaceSocketConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(client.AeroSpaceSocketConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockAeroSpaceConnectorMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockAeroSpaceConnector)(nil).Connect))
}
